<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>dfordivam' blog</title>
    <link href="https://dfordivam.github.io/atom.xml" rel="self" />
    <link href="https://dfordivam.github.io" />
    <id>https://dfordivam.github.io/atom.xml</id>
    <author>
        <name>Divam</name>
        <email>dfordivam@gmail.com</email>
    </author>
    <updated>2021-09-05T00:00:00Z</updated>
    <entry>
    <title>High extraction espresso / How I make coffee</title>
    <link href="https://dfordivam.github.io/posts/2021-09-05-espresso-high-extraction.html" />
    <id>https://dfordivam.github.io/posts/2021-09-05-espresso-high-extraction.html</id>
    <published>2021-09-05T00:00:00Z</published>
    <updated>2021-09-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  5, 2021
    
</div>

<h2 id="method">Method</h2>
<ul>
<li><p>Ground the coffee as fine as possible, use 10~11g for a double-shot (~35g out)</p></li>
<li><p>Keep the grounded coffee in a moisture rich environment for 12~36 hours</p></li>
<li><p>Make the espresso slowly (90s) at low pressure (2 bar), and aim for 1:3 ~ 1:4 ratio</p>
<p>(1:3 is good for dark roast, for others the ratio could be increased)</p></li>
</ul>
<h2 id="story">Story</h2>
<p>In early 2021, I watched a series of videos by James Hoffman on YouTube, and began doing experiments to achieve high extraction. After a few weeks of trials I settled down on this technique and has been doing it for more than six months now. The nice thing about this is that it gives good results every time. In fact it is quite hard to make a disaster even if some mistakes are made (like accidently using high pressure/flow)</p>
<p>The key idea for achieving high extraction is to have large surface area, which in turn is obtained by grinding the coffee very fine. But the finer the grounds are the higher is the chance of a disaster, as the grounds will either block the pores of the porta filter, or result in channeling due to high resistance of the puck.</p>
<p>The solution I devised is to let the coffee grounds absorb/adsorb moisture. Since the extraction of coffee happens by the flow of water over the grounds, if the grounds already have contact with the water it will enhance the flow of more water over it (while brewing).</p>
<p>To achieve this passive absorption of moisture, I keep the grounded coffee in small bowls, and keep these bowls inside another container which has little bit of water in it. If this container is kept closed (with a lid) the moisture inside it should reach a very high value after a few hours. The coffee kept in it for more than 12 hours should absorb upto 15% water by weight. Also the “volume” of the coffee grounds would increase. (When clamping the coffee you can feel it; the moisture rich grounds would occupy more volume for the same amount of pressure)</p>
<!-- Here is an illustration (fails to render properly on browser) -->
<!--          ┌┳───────────────────────────────┳┐ -->
<!--           │                               │ -->
<!--           │                               │ -->
<!--           │                               │ -->
<!--           │  ┌           ┐ ┌           ┐  │ -->
<!--           │  │⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿│ │⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿│  │ -->
<!--           │┈┈│⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿│┈│⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿│┈┈│ -->
<!--           │  └───────────┘ └───────────┘  │ -->
<!--           └───────────────────────────────┘ -->
<p>The other important point is to make the espresso slowly, maintaining a low pressure. Unfortunately I have a cheap “automatic” espresso maker with a rather high pressure. The way I achieve low pressure (and less flow) is by turning the machine on and off repeatidly (pulse width modulation). A manual lever machine would be very nice.</p>
<ul>
<li>Note that its not possible to obtain crema with this method</li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Wwoofing in Kyoto</title>
    <link href="https://dfordivam.github.io/posts/2018-09-23-wwoofing-in-kyoto.html" />
    <id>https://dfordivam.github.io/posts/2018-09-23-wwoofing-in-kyoto.html</id>
    <published>2018-09-23T00:00:00Z</published>
    <updated>2018-09-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 23, 2018
    
</div>

<figure>
<img src="/images/wwoof-kyoto/banner.jpg" alt="View from bedroom" /><figcaption aria-hidden="true">View from bedroom</figcaption>
</figure>
<p>I recently went <a href="https://www.wwoofjapan.com/main/index.php?lang=en">wwoofing</a> for 10 days at <a href="https://hellofarmorganics.com/">Hello farm organics</a> in Kyoto’s Keihoko district. It is in the north mountains of Kyoto, about 1.5 hour bus ride from the city. The place is a couple Zenryu and Ava living in village, managing farm size of about a hectare, growing organic vegetables and greens, and following vegan lifestyle. Checkout their website for more info!</p>
<p>Here I will give a brief of my experiences and things I learnt about organic farming.</p>
<h2 id="the-start">The start</h2>
<p>I was supposed to reach on Tuesday 4th, so I planned my travel on 3rd night to Osaka. But on 4th <a href="https://www.bbc.com/news/world-asia-45417035">the big typhoon (21, Jebi)</a> struck Osaka/Kyoto region, so all the transportation services were stopped that day, so I had to stay for a night in Kyoto city. The typhoon was a very strong one, and caused lots of damage in the mountain area of Kyoto, roads were blocked and the bus service to the remote town of Shuzan was stopped. On top of that the internet service and phone service to this town was disrupted for 2 days (they even spent a night without electricity). So I could not even communicate with Zenryu san, and had no idea what is the situation up there.</p>
<p>So my stay is Kyoto city was extended for 2 more nights. But the bus service did not resume even on Friday, so finally I went to a nearby train station, and Zenryu san came to pick up.</p>
<figure>
<img src="/images/wwoof-kyoto/fallen-trees.jpg" alt="Fallen trees at a nearby temple" /><figcaption aria-hidden="true">Fallen trees at a nearby temple</figcaption>
</figure>
<p>According to them this is the worst summer they have experienced in the last 7 years of farming. And I reached here right after the big disaster so an interesting experience was in store for me.</p>
<p>The field where they grow vegetables in summer is just 50m from the house. It is actually the land owned by neighbours who have let them grow vegetables here.</p>
<figure>
<img src="/images/wwoof-kyoto/bikes.jpg" alt="Farm" /><figcaption aria-hidden="true">Farm</figcaption>
</figure>
<p>And they also have three greenhouses a little far from house for growing vegetables in winters. But a terrible thing happened there, one of the greenhouse was badly damaged in the typhoon. Last year also they had a greenhouse damaged due to winter snow, so they build a new from scratch. The new one was stronger so it survived, but the old one could not.</p>
<h2 id="wwoof-schedule">Wwoof schedule</h2>
<p>Get up at 6:30-7:00, have a little breakfast (a slice of bread with coffee), and get ready to start work at 8. Then at 12 noon take a break, clean up, do lunch at 1, a little rest, and back to field at 3pm. The work continues till 6pm, after which take a shower, have dinner at 7pm. Apart from this need to do the dishes after every meal. Zenryu san does all the cooking.</p>
<h2 id="the-work">The work</h2>
<h4 id="weeding">Weeding</h4>
<p>Remove grasses and other weeds around the beds. The machine tools can be used to cut the grass on the area around the beds, but in between the beds the weeding has to be done by hand. Doing it by hand also ensures that the weeds are pulled along with roots, especially the grasses, as they grow again so fast if the roots are left.</p>
<figure>
<img src="/images/wwoof-kyoto/before-weeding-path.jpg" alt="Before weeding, path between beds" /><figcaption aria-hidden="true">Before weeding, path between beds</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/after-weeding-path.jpg" alt="After weeding" /><figcaption aria-hidden="true">After weeding</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/weeding-pile-2.jpg" alt="Weeding of Bed and paths" /><figcaption aria-hidden="true">Weeding of Bed and paths</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/weeding-pile-main.jpg" alt="Accumulate all weeds for compost" /><figcaption aria-hidden="true">Accumulate all weeds for compost</figcaption>
</figure>
<h4 id="pot-saplings">Pot saplings</h4>
<p>The seeds are grown in a small area/container, and then the saplings are transferred to a pot, one in each. These pots are then kept in a greenhouse for a couple of weeks, and then planted in the field.</p>
<figure>
<img src="/images/wwoof-kyoto/lettuce-saplings.jpg" alt="Saplings ready to plant on field" /><figcaption aria-hidden="true">Saplings ready to plant on field</figcaption>
</figure>
<p>the pots used for this step need to be cleaned after use and kept in store for next season. This is to prevent the eggs of insects.</p>
<figure>
<img src="/images/wwoof-kyoto/pots-before-clean.jpg" alt="Before cleaning" /><figcaption aria-hidden="true">Before cleaning</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/pots-after-clean.jpg" alt="After cleaning" /><figcaption aria-hidden="true">After cleaning</figcaption>
</figure>
<h4 id="bed-prepare">Bed prepare</h4>
<ol type="1">
<li>Clear weeds</li>
<li>Use the tilling machine to till the whole area and collect soil together in rows</li>
<li>Use the hand tools to collect soil and give rows a proper shape (this is very labor intensive step)</li>
<li>Add stuff like compost and neem powder</li>
<li>Use the tilling machine to mix all this and level soil in a row</li>
<li>Cover the bed with plastic</li>
</ol>
<p>The below area was planted with a grass useful as manure and later the grass was cut and left in it to get composted. Initially the a part of the area on left was also covered by the grass as shown in the right part of image.</p>
<figure>
<img src="/images/wwoof-kyoto/bed-prepare-start.jpg" alt="Start of bed preparation" /><figcaption aria-hidden="true">Start of bed preparation</figcaption>
</figure>
<p>The tilled soil was then accumulated in the form of rows, one of them is kept for use later, so it was covered with transparent plastic.</p>
<figure>
<img src="/images/wwoof-kyoto/bed-prepare-make-rows.jpg" alt="Make rows" /><figcaption aria-hidden="true">Make rows</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/prepared-beds.jpg" alt="Prepared beds" /><figcaption aria-hidden="true">Prepared beds</figcaption>
</figure>
<p>Here holes were made 20cm apart in three rows, then compost was added, followed by neem powder. This was not planted at that time due to rains.</p>
<figure>
<img src="/images/wwoof-kyoto/bed-with-holes.jpg" alt="Bed for turnip" /><figcaption aria-hidden="true">Bed for turnip</figcaption>
</figure>
<p>In case of planting potatoes the bed is not covered in plastic, instead rice straws are put on top to preserve moisture and prevent weeds. A few weeks later there might be a need to cover it with plastic to increase soil temperature. The potatoes were already sprouting when planted, and their texture became a little soft.</p>
<figure>
<img src="/images/wwoof-kyoto/bed-prepare-plant-potato.jpg" alt="Planted potatoes" /><figcaption aria-hidden="true">Planted potatoes</figcaption>
</figure>
<h4 id="plant-saplings">Plant saplings</h4>
<p>Usually when the bed has been prepared, a hole is dug in the plastic and soil beneath, handful of compost is added, then neem powder is added on top. The plant saplings are then placed on top of that, and the soil around them is firmly pressed to a level surface. Then finally the plants are watered with the water having a little bit of EM (microbial concentrate) and charcoal liquid.</p>
<p>For lettuce there is a special step required before planting in the field. The potted plant (along with its soil) is wrapped in a newspaper on sides such that the newspaper is an inch higher than the soil level, and covers the plant on all sides. This is done to prevent an special kind of insect, which crawls on the soil, to reach the lettuce. The planted bed is then covered with a net material with tiny holes.</p>
<figure>
<img src="/images/wwoof-kyoto/lettuce-potted-sapling.jpg" alt="Lettuce sapling covered with newspaper" /><figcaption aria-hidden="true">Lettuce sapling covered with newspaper</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/lettuce-potted-sapling-bed.jpg" alt="Bed covered with net" /><figcaption aria-hidden="true">Bed covered with net</figcaption>
</figure>
<h3 id="harvest">Harvest</h3>
<h4 id="tomatoes">Tomatoes</h4>
<p>We tried to harvest a little ripe tomatoes, but in this weather most of them were destroyed. About 30% fell of the plants and rot on ground, 50% developed patches or lines, or their skin cracked open due to rain, so these cannot be sold. I think less than 20% were actually harvested.</p>
<figure>
<img src="/images/wwoof-kyoto/tomato-plant-zoom.jpg" alt="Small red + black cherry tomatoes" /><figcaption aria-hidden="true">Small red + black cherry tomatoes</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/tomato-plant-zoom-2.jpg" alt="Tomato" /><figcaption aria-hidden="true">Tomato</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/tomato-harvest.jpg" alt="Harvest, 2/3 days interval" /><figcaption aria-hidden="true">Harvest, 2/3 days interval</figcaption>
</figure>
<h4 id="capsicum">Capsicum</h4>
<p>There was much better harvest of capsicum, but still had lots of waste.</p>
<figure>
<img src="/images/wwoof-kyoto/capsicum-plant.jpg" alt="Capsicum/Peppers" /><figcaption aria-hidden="true">Capsicum/Peppers</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/capsicum-harvest.jpg" alt="Harvest" /><figcaption aria-hidden="true">Harvest</figcaption>
</figure>
<h4 id="pumpkin">Pumpkin</h4>
<p>The pumpkins were harvested once in a week. The ones developing yellow patches (due to surface contact with ground, or other things) were harvested, irrespective of its size.</p>
<p>They were first cleaned with a wet cloth to remove all the mud, especially from its ends, and then stored for a couple of weeks.</p>
<figure>
<img src="/images/wwoof-kyoto/kabucha-plant.jpg" alt="Kabucha/Pumpkin" /><figcaption aria-hidden="true">Kabucha/Pumpkin</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/kabucha-back.jpg" alt="Kabucha surface touching ground" /><figcaption aria-hidden="true">Kabucha surface touching ground</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/kabucha-enclosed.jpg" alt="Kept covered to protect from animals/crows" /><figcaption aria-hidden="true">Kept covered to protect from animals/crows</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/kabucha-harvest.jpg" alt="Harvest" /><figcaption aria-hidden="true">Harvest</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/kabucha-storage.jpg" alt="Storage" /><figcaption aria-hidden="true">Storage</figcaption>
</figure>
<h4 id="eggplant">Eggplant</h4>
<p>Eggplant was the one able to survive best this weather. This is perhaps one of the reason we ate it everyday, in every meal :D</p>
<figure>
<img src="/images/wwoof-kyoto/eggplant-plants.jpg" alt="Eggplant" /><figcaption aria-hidden="true">Eggplant</figcaption>
</figure>
<p>Some plants had problems, like they were not producing good fruits. So they were pruned, and compost was added to their roots. They are supposed to grow back again in few weeks and produce more fruits.</p>
<figure>
<img src="/images/wwoof-kyoto/eggplant-plant-pruned.jpg" alt="Adding compost to the pruned eggplant roots" /><figcaption aria-hidden="true">Adding compost to the pruned eggplant roots</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/eggplant-packed.jpg" alt="Ready for market" /><figcaption aria-hidden="true">Ready for market</figcaption>
</figure>
<h4 id="others">Others</h4>
<p>For baby salad mix a number of herbs/greens were harvested like parsley, lettuce. This is also their main production in the winter months.</p>
<p>One day I harvested mint, we needed about 100 gm from a bed of 5sqmt. There were 4 kinds of mint plants but it was very difficult to get good leaves. Mostly the older leaves ere broken, have holes or some kind of fungi on its back. It took me almost an hour to do this.</p>
<h4 id="materials-used-for-cover">Materials used for cover</h4>
<ol type="1">
<li><p>Black plastic - This is a thin opaque plastic material, easy to make holes. It is used to cover the beds directly and holes are made in it wherever one needs to plant. It prevents weed growth in the bed, and prevents the underlying soil from rain also.</p>
<p>Sometimes there is a white opaque plastic also, I think it is slightly stronger material.</p></li>
<li><p>Transparent plastic - This is used to cover a freshly prepared bed, when it need time to get ready. It covers the soil completely and it has no holes or air passages. It increases the temperature in the soil below and helps disinfect (thermophilic composting).</p></li>
<li><p>A translucent breathable material - This is a special material that does not allow any insects to pass through. Though air and little water can go through it. It is perhaps the best material to cover planted beds, but it is expensive and very fragile. It can be used to cover the soil directly, but mostly it is used to cover the plants, especially the delicate ones like baby salad and herbs.</p></li>
</ol>
<figure>
<img src="/images/wwoof-kyoto/translucent-material.jpg" alt="Translucent material" /><figcaption aria-hidden="true">Translucent material</figcaption>
</figure>
<ol start="4" type="1">
<li>Net - This material has tiny holes in it and can allow little insects to pass through. It is the most common material to cover a planted bed. It is much more stronger than the translucent material.</li>
</ol>
<h4 id="support-structure-types.">Support Structure types.</h4>
<figure>
<img src="/images/wwoof-kyoto/curved-plastic-support.jpg" alt="Simple curved plastic supports" /><figcaption aria-hidden="true">Simple curved plastic supports</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/wooden-stick-support.jpg" alt="Small wood sticks" /><figcaption aria-hidden="true">Small wood sticks</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/metal-rods-support.jpg" alt="Metal rods, tied with strong plastic" /><figcaption aria-hidden="true">Metal rods, tied with strong plastic</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/metal-rods-curved-support.jpg" alt="Metal U shaped support" /><figcaption aria-hidden="true">Metal U shaped support</figcaption>
</figure>
<h4 id="wood-cutting">Wood cutting</h4>
<p>I also did some wood cutting one evening. The peach tree in their home garden fell due to the typhoon, and it had to be cut. I cut some branches into smaller size pieces for use in the water heater.</p>
<figure>
<img src="/images/wwoof-kyoto/peach-tree.jpg" alt="Peach tree" /><figcaption aria-hidden="true">Peach tree</figcaption>
</figure>
<figure>
<img src="/images/wwoof-kyoto/cut-wood.jpg" alt="Cut wood" /><figcaption aria-hidden="true">Cut wood</figcaption>
</figure>
]]></summary>
</entry>
<entry>
    <title>「tenjinreader.com」の開発体験レポート</title>
    <link href="https://dfordivam.github.io/posts/2018-03-08-%E3%80%8Ctenjinreader.com%E3%80%8D%E3%81%AE%E9%96%8B%E7%99%BA%E4%BD%93%E9%A8%93%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88.html" />
    <id>https://dfordivam.github.io/posts/2018-03-08-%E3%80%8Ctenjinreader.com%E3%80%8D%E3%81%AE%E9%96%8B%E7%99%BA%E4%BD%93%E9%A8%93%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88.html</id>
    <published>2018-03-08T00:00:00Z</published>
    <updated>2018-03-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March  8, 2018
    
</div>

<p>このアプリケーションを自身の日本語の学習経験と必要条件ですから使っていました。</p>
<p>この記事はHaskell　Developersについてから、こちら日本語学習とアプリの設計ことについては何も話しません。</p>
<hr />
<h2 id="はじめて">はじめて</h2>
<p>このアプリケーション全部Haskellで書いています.</p>
<p>しかも、いくつか新しい（実験的な）ライブラリーを使用とした。このブログは私の経験です。</p>
<p>一年前ウェブプログラミングを始めた。Haskellを４年上に使ってから、これはJavascriptより簡単と感じます</p>
<p>五ヶ月に仕上げました。</p>
<p><a href="https://github.com/blueimpact/tenjinreader">Source code on Github</a></p>
<p>総コードベースは約</p>
<ul>
<li>Frontend - 3k</li>
<li>Backend - 3k</li>
<li>Common - 1k</li>
</ul>
<h2 id="reflex-frp">Reflex FRP</h2>
<p>Frontend は全部「Reflex-DOM FRP」で使っていました。</p>
<h4 id="いい">いい</h4>
<ul>
<li><p>全部 Haskell</p>
<p>Frontend と Backend　の両方を　Haskell　に持っていているのは素晴らしいです。３つのプロジェクトの間でコードを cut-paste から移動してきました。</p></li>
<li><p>Reflex　に　Code refactoring　と　UI　変更、 Widget　の移動と複数の場所で再利用がは非常に簡単です。</p></li>
<li><p><a href="https://github.com/ElvishJerricco/reflex-project-skeleton"><code>reflex-project-skeleton</code></a>、 <code>nix</code>　と <code>jsaddle-warp</code> は 開発ワークフローにとって非常に役に立ちます。 <code>nix-copy-closure</code>からサーバーの deployment は簡単です。</p>
<p>nix との最初の闘争がありましたが、現在は数多くの優れたリソースがあります。#reflex-frp IRC channel は非常に役に立ちます。</p></li>
<li><p>websocket のために、自分で作った小さな<a href="https://github.com/dfordivam/reflex-websocket-interface">ライブラリ</a>を使用します。 舞台裏でこのライブラリはメッセージのエンコーディング/デコードやイベントの配達するがやっています。</p>
<p>新しいメーセージを参加するや変更するはとりわけ簡単です</p>
<p>サーバーコミュニケーションのコードは　Widget 自体に含まれています。</p>
<p>新しい機能の開始時に、Frontend でどのようなダータ形式は必要が知りませんから、Backend(DB)　から生データを転送します。</p>
<p>Frontend で色々な場所で生データを操作しまして適切な形式を決定します。これからこのコードを　Backend に移動することができます。</p></li>
</ul>
<h4 id="困難と挑戦">困難と挑戦</h4>
<ul>
<li><p>大きな <code>rec</code> block にコードの　compilation は難しい、エラーメッセージは誤解を招く可能性があります。</p>
<p><code>rec</code> block はまた、奇妙なループを導入したり、アプリケーションを停止させたりする可能性があります。これを解決策ためには、<code>delay</code>を加えることがあります</p>
<p>Tip 1 - 変数名を再利用しないでください</p>
<pre><code>rec
  retVal &lt;- do
    retVal &lt;- someStuff
    ...
    return retVal</code></pre>
<p>Tip 2 - <code>rec</code> block が複雑になるときは、別の関数を作成してください。</p></li>
<li><p><code>Reflex.Collection</code>で有用な関数がありますが、それらのゆ動作とユースケースを理解するのは難しいでしょう。</p></li>
<li><p>大きな<code>Dynamic</code>は扱いにくい</p>
<p>例えば：<code>[Dynamic t (Bool, Int)]</code> から　<code>Event t (Set Int)</code> を作るために <code>[]</code> -&gt; <code>Set</code> -&gt; <code>tagDyn</code> より <code>[]</code> -&gt; <code>tagDyn</code> -&gt; <code>Set</code>　良い。</p>
<p><code>dyn</code> より <code>widgetHold</code> 良い。</p></li>
<li><p>Reflex はまだ統合された情報源を必要としている。</p></li>
<li><p><code>ghcjs</code> のパフォーマンスは良くありません。<code>webghc</code>でより良いパフォーマンスが期待できます。</p></li>
<li><p>External JS library を使って時</p>
<ul>
<li><p>時々FFI や DOM APIs を正しく機能ために<code>delay</code>が必要です。</p></li>
<li><p>External JS は例外した場合、アプリは停止します。</p></li>
<li><p>Bootstrap, Semantic UI ようなライブラリのと統合はまだ進行中です。</p></li>
</ul></li>
</ul>
<h2 id="開発環境">開発環境</h2>
<ul>
<li><p><code>Spacemacs</code> with syntax highlighting, and <code>hindent</code></p></li>
<li><p>Local <code>hoogle</code> server running from <code>nix-shell</code></p></li>
<li><p><code>./cabal new-repl</code> from the project skeleton, and sometimes <code>ghcid</code>.</p></li>
<li><p>Frontend running on Chrome via <code>jsaddle-warp</code>.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Introducing tenjinreader.com</title>
    <link href="https://dfordivam.github.io/posts/2018-02-27-introducing-tenjinreader.html" />
    <id>https://dfordivam.github.io/posts/2018-02-27-introducing-tenjinreader.html</id>
    <published>2018-02-27T00:00:00Z</published>
    <updated>2018-02-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 27, 2018
    
</div>

<p>My thoughts on the motivation and design of <a href="https://tenjinreader.com">tenjinreader.com</a></p>
<h2 id="background">Background</h2>
<p>There can be many different ways to learn a language. Talking (speaking and listening) in your day to day life is the best way.</p>
<p>The second best is studying. Studying happens in a calm, relaxed, and distraction free environment. It takes a lot of effort / discipline to study, but it does give better results.</p>
<p>I am right now focusing my efforts more on studying/reading because it is easier than talking (for me, I dont talk a lot). I learned English by reading dozens of books, and I think I can learn Japanese also.</p>
<h2 id="motivation-behind-the-srs">Motivation behind the SRS</h2>
<p>I have been doing SRS reviews from the very start of Japanese learning. I find them very helpful to retain the vocabulary.</p>
<p>I wanted to try speech recognition for doing my reviews, so this was the main motivation behind developing a new browser based SRS app from scratch.</p>
<p>There were a few shortcomings in the existing tools, which led me to the current design.</p>
<h3 id="wanikani-and-houhou-srs">Wanikani and HouHou SRS</h3>
<p>I used Wanikani for an year, but I realised I dont want to spend so much time learning Kanji. Also I wanted a customised study, the flixibility to chose which words I learn first, and for which words I learn the Kanji form.</p>
<p>Then I moved on to HouHou SRS, it was a much better experience, as I could suspend review items which were nor relevant or difficult, and instead focus on the vocabulary which I can understand.</p>
<p>I used it for almost an year, it was going good but then I installed Linux as a primary OS, and now I could not longer do my reviews.</p>
<h3 id="anki">Anki</h3>
<p>Also during this time I started using Anki for doing the production reviews, for much of the same vocabulary as HouHou SRS. I found it odd to use two different tools, one for recognition reviews and other one for production.</p>
<p>Nevertheless these are the good things about Anki</p>
<ul>
<li><p>I like the interval increment mechanism of Anki. If you answer a question correctly after 10 days, but it was due for 2 days. Then the next review time will be calculated not by 2 days but 10 days. I feel this is much better than the bucket system of Wanikani / HouHou SRS</p></li>
<li><p>I did not have to type the answer. This was especially annoying for entering the english meanings in HouHou / Wanikani. In my case I spend a lot of time in front of computer for my job, mostly typing and I wanted to avoid putting more strain on my wrists.</p>
<p>But even for hiragana input I found that many times I know the answer, and its more convenient to press the 知っている button.</p></li>
</ul>
<p><strong>In my opinion the repetition part of the SRS should be emphasised over the game/quiz part. Its more important to have a look at the vocabulary again and again, than to answer it correctly.</strong></p>
<h3 id="srs-in-tenjinreader">SRS in tenjinreader</h3>
<p>The ability to answer the reviews using voice was a really the driving factor behind the design of SRS in tenjinreader</p>
<p>For this feature I surveyed and tried out the existing speech to text technologies for a few months, like Kaldi and Julius.</p>
<p>I even got the Juluis speech recognition engine to work with a browser frontend. But the quality of recognition was unacceptable. It would be very frustating for a user if she has to repeat the answers multiple times. The language learning itself is a difficult process, and giving an answer should not be this difficult.</p>
<p>So I decided to use the Google’s speech recognition (via Chrome or Chromium browser).</p>
<h2 id="motivation-behind-the-design-of-reader">Motivation behind the design of Reader</h2>
<p>After coming to Japan I immediately realised my studies were incomplete. I had never studied the grammar and had no clue how to use the words in sentences.</p>
<p>I went through the <a href="http://www.guidetojapanese.org/learn/grammar">Tae Kim’s awesome grammar guide</a> (and still refer it). But what I really needed now was a way to not just learn useful words, but also see them used in sentences.</p>
<p>So soon I started with a school textbook of 5th grade containing short stories. The content was interesting but it was quite difficult for me to read it properly, as I had to constantly refer to dictionary or online resources, and sometimes use Google translate’ Camera feature just to figure out the start and end of words.</p>
<p>When I tried to look for computer based tools for reading Japanese, I found them to be much worse than SRS. The reading of Japanese material is especially complicated because of the Kanji and lack of spacing between words.</p>
<p>I soon found japanese.io, and it was a big improvement over the earlier tools. After using it for few months I found these problems.</p>
<ul>
<li><p>It could not handle long texts.</p>
<p>I had to split my books in chapters and then split the chapters further in few pages.</p></li>
<li><p>The interface was not that good</p>
<p>I wanted strong contrast when reading on my ebook reader (like proper black color on a white background), and dark theme when using laptop. So I had to manually tinker the page’s styling.</p></li>
<li><p>I wanted a way to hide the furigana for the words I already know or studying.</p></li>
</ul>
<p>Overall it was manageable but not a good experience. So this was the major motivation to create this reader.</p>
<h3 id="with-tenjin-reader">With tenjin reader</h3>
<ul>
<li><p>I can read books: It even remembers my reading progress</p></li>
<li><p>It is well integrated with SRS: Especially the furigana visibility</p></li>
<li><p>I can change the look and feel</p>
<p>The vertical text somehow feels better to read, perhaps just for aesthetic pleasure. (But why not, there are people who learn Japanese just to draw the Kanji)</p></li>
<li><p>The interface of showing the word meaning is better</p>
<p>The pop-up showing the meaning does not hide the actual word. This was a very annoying problem with japanese.io while using on ebook reader.</p></li>
<li><p>I can mark the sentences as favourite, and review them again through “Random Fav sentence” feature.</p>
<p>I can do a nested search for meaning + sentence in the same browser window. This is very important to not get distracted, and helps to get back where you started.</p></li>
<li><p>It properly handles the furigana specified in the ruby《》 (especially for archaic usage in texts in public domain)</p></li>
<li><p>While using an ebook reader scrolling is very difficult, it is easier to click and change the page.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Introducing tenjinreader.com for Haskellers</title>
    <link href="https://dfordivam.github.io/posts/2018-02-27-introducing-tenjinreader-for-haskellers.html" />
    <id>https://dfordivam.github.io/posts/2018-02-27-introducing-tenjinreader-for-haskellers.html</id>
    <published>2018-02-27T00:00:00Z</published>
    <updated>2018-02-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 27, 2018
    
</div>

<p>I created this application based on my own experiences and requirements for Japanese language learning.</p>
<p>This post is mainly for Haskell developers, so I will not discuss anything about the Japanese language learning part of this application here. Checkout my other post for details on that.</p>
<hr />
<h2 id="the-big-picture">The Big Picture</h2>
<p>The app is written end-to-end in Haskell.</p>
<p>Moreover, I tried to use a bunch of new (experimental) stuff, so this blog post is about my experience</p>
<p>I started web programming just one year back. I have used Haskell for more than 4 years, and it is easier for me to use complex Haskell stuff than learn javascript.</p>
<p>In a period of almost 5 months I was able to make this app from an idea to a beta release.</p>
<p>The total code base is approx (lines of Haskell code). <a href="https://github.com/blueimpact/tenjinreader">Source code on Github</a></p>
<ul>
<li>Frontend - 3k</li>
<li>Backend - 3k</li>
<li>Common - 1k</li>
</ul>
<p>and about 1k more for some extra libraries I created for this project, but pulled in a separate project.</p>
<h2 id="reflex-frp">Reflex FRP</h2>
<p>Frontend is written entirely using Reflex-DOM FRP library.</p>
<h4 id="the-good">The good</h4>
<ul>
<li><p>Its Haskell</p>
<p>Having both FE and BE in Haskell is awesome. There have been many occasions where I have moved the code (by cut-paste) between the three projects.</p></li>
<li><p>With Reflex code refactoring and changes in UI are very easy. Moving around widgets, re-using widgets from multiple places, its all very easy.</p></li>
<li><p><a href="https://github.com/ElvishJerricco/reflex-project-skeleton"><code>reflex-project-skeleton</code></a>, <code>nix</code>, and <code>jsaddle-warp</code> are amazing for development workflow. I even do the deployment via <code>nix-copy-closure</code> which is awesome.</p>
<p>There was an initial struggle with nix, but there are now a number of good resources, and #reflex-frp is an awesome support channel.</p></li>
<li><p>For websocket I created a <a href="https://github.com/dfordivam/reflex-websocket-interface">small library</a> specially for reflex. Behind the scenes this library does a lot of plumbing of Events, encoding / decoding of messages.</p>
<p>The experience has been great, I dont have to think a second time before changing some message type or adding new requests.</p>
<p>Moreover the code to communicate with server can now be part of the widget itself. Things works so seamlessly.</p>
<p>In the start of a new feature I dont really know what all data will be required in frontend, so I pull-in the complete entries from DB (thats why a lot of DB stuff is in <code>common</code> package with ToJSON and FromJSON instances).</p>
<p>Then I write code in frontend to manipulate the data and get it to what I need. Later I have the choice to move this code to backend, and only send the manipulated data to frontend. (But many times I let things as it is, the client should also do some work!)</p></li>
</ul>
<p>I am sure there is a lot more good, but I think it would be obvious in a comparison to other technologies. I hardly have any experience of frontend development, so I will now start with the pain points…</p>
<h4 id="difficulties">Difficulties</h4>
<ul>
<li><p>Large <code>rec</code> blocks are hard to compile as the error messages can be misleading, especially if you make mistakes in using things which are to be used monadically <code>MonadWidget</code> with <code>Event</code>/ <code>Dynamic</code>.</p>
<p>The <code>rec</code> block can also introduce strange loops or hang the app. Although they are not that hard to debug (as you can fairly easily pin point the code causing it). But the solution often involves heuristically adding <code>delay</code> to make it work.</p>
<p>Tip 1 - Dont re-use names like this, its very easy to mess things up and create loops.</p>
<pre><code>rec
  retVal &lt;- do
    retVal &lt;- someStuff
    ...
    return retVal</code></pre>
<p>Tip 2 - When the code starts to get complicated with nested <code>rec</code> blocks, create a separate function.</p>
<p>There is also a weird problem that a polymorphic function does not type-check if defined inside a <code>let</code> block inside <code>rec</code> (without an explicit type signature). This can be annoying for a new comer, as the code is fine but still it does not compile.</p></li>
<li><p>The <code>Reflex.Collection</code> consist of a bunch of useful widgets, but their behaviour and use-case can be dificult to comprehend.</p></li>
<li><p>It can be tricky to handle big <code>Dynamic</code> values.</p>
<p>For example I had to create a <code>Event t (Set Int)</code> from <code>[Dynamic t (Bool, Int)]</code>. The <code>[]</code> -&gt; <code>Set</code> -&gt; <code>tagDyn</code> approach was not good, instead <code>[]</code> -&gt; <code>tagDyn</code> -&gt; <code>Set</code> is better.</p>
<p><code>dyn</code> is tricky, avoid it. Use <code>widgetHold</code> instead.</p></li>
<li><p>Reflex eco-system still need a consolidated resource of information. I have done some contributions last year to the docs, and have a bunch of more stuff lying around in my local repo to update the docs.</p></li>
<li><p>When opening the app, about 10% of the time there are some strange errors / assertion in reflex runtime like “Causality loop found”. On doing a refresh it mostly works fine.</p></li>
<li><p>The performance of certain parts of app is terrible, I attribute it to <code>ghcjs</code> mostly (as the performance was better with <code>jsaddle-warp</code>), and hope with <code>webghc</code> things will be much better.</p></li>
<li><p>When the structure of DOM is not according to what you desire, you have the choice to refactor code and pass <code>Event</code> and <code>Dynamic</code> all around the app, or to use some CSS magic to fix stuff (like <code>z-index</code>, <code>position: absolute</code>).</p></li>
<li><p>When using external JS libraries with reflex-dom</p>
<ul>
<li><p>Delay in events are required to get things like DOM Apis / FFI to work properly.</p></li>
<li><p>If the external JS throws an exception then the app is dead. Perhaps there is a way to catch and continue?</p></li>
<li><p>Integration with UI libraries like Bootstrap, Semantic UI, etc is still in development, more effort is required to make it work.</p></li>
</ul></li>
<li><p>The use of a monadic style for DOM creation can be difficult at times, but I feel its a minor thing and the pros outweigh the cons.</p></li>
</ul>
<h2 id="haskey-for-persistent-db">Haskey for persistent DB</h2>
<p>For the DB I have taken an even more experimental approach by not using any conventional DB or even acid libraries. The reason for this was I wanted simplicity in usage, and the data should not be completely in memory.</p>
<p>The <a href="https://github.com/haskell-haskey/haskey"><code>haskey</code></a> library released in late last year fortunately had both these features.</p>
<p>This was a very important for me to do fast development, as I re-modelled the schema dozens of times based on the requirements in Frontend, and incremental addition of small features here and there.</p>
<p>So <code>haskey</code> is a new library and <strong>definitely not yet ready for production.</strong></p>
<p>While still developing the application I found a <a href="https://github.com/haskell-haskey/haskey/issues/70">major bug</a> in its code, it was fixed fast thanks to the author!</p>
<p>But the real scary stuff was; after putting the site on production my own data got corrupted after a few days. I dont know yet what happened; fortunately I had backups to recover it from the previous day.</p>
<p>So there are definitely more bugs lurking around in the code, and the only safe way to use this library is to always take backups / snapshots (like hourly)</p>
<p>One good thing I did with <code>haskey</code> is to keep the data of every user in a separate DB (filesystem folder). This greatly simplified my code base and doing recovery from backups.</p>
<h4 id="migrations-in-haskey">Migrations in Haskey</h4>
<p>For migrations I used a method inspired by <em>Trees that Grow</em> paper. The idea is to use <code>type family</code> to have different variations of a tree data structure. In my case I have just two variations of the main schema: a <code>CurrentDB</code> and an <code>OldDB</code>. The application code always works on the <code>CurrentDB</code> and the <code>OldDB</code> is used to for migrating old schema to the current one.</p>
<p>Maintaining many versions of schema will be a much more complicated task, perhaps it can be done using this approach but I am not too sure.</p>
<p>There were a few issues in getting the code to compile with the use of <code>type family</code>, specifically in the <code>instance</code> / <code>deriving instance</code> declarations. I have used some hit and trial to get it working. But it would be good to have a better understanding / proper way of doing it. (ie dont refer to my code as a correct way to do it, there might be bugs)</p>
<h3 id="yesod">Yesod</h3>
<p>The backend is using <code>yesod</code>, it is very simple to set up a web site with authentication using the existing libraries. The major work is done via websocket, so there was no need for a library like <code>servant</code>.</p>
<h2 id="dev-workflow">Dev workflow</h2>
<ul>
<li>Spacemacs with simple support of haskell like syntax highlighting, and hindent</li>
<li>Local hoogle server running from nix-shell</li>
<li><code>./cabal new-repl</code> from the project skeleton, and sometimes ghcid.</li>
<li>Frontend running on Chrome via <code>jsaddle-warp</code>.</li>
</ul>
<h2 id="final-thoughts">Final thoughts</h2>
<ul>
<li><p>Your application need to have a certain level of complexity to demand the use of Reflex. I think this app had a good enough complexity to deserve this.</p>
<p>There is a learning curve with reflex. It will only pay for itself when the application is complex.</p></li>
<li><p><code>Haskey</code> is a good library for fast prototyping, more robust DB can be put in place later.</p></li>
<li><p>I embraced <code>lens</code> (and some of its operators) while working on this, I would say that the effort pays back.</p></li>
<li><p>I dont have any testing stuff right now for this app. There were a few functions which were algorithmically complex, and I just created a small test function next to it, for manual testing.</p>
<p>Things have been ok as I am the only dev working on this project. With multiple people there is definitely a need for a test-suite.</p></li>
</ul>
]]></summary>
</entry>

</feed>
